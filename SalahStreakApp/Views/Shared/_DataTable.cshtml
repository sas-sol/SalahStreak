@model dynamic

@{
    var tableId = ViewData["TableId"]?.ToString() ?? "dataTable";
    var data = ViewData["TableData"] as IEnumerable<dynamic> ?? new dynamic[] { };
    var title = ViewData["TableTitle"]?.ToString() ?? "Data Table";
    var showExport = ViewData["ShowExport"] is bool export && export;
    var showSearch = ViewData["ShowSearch"] is bool search && search;
    var showRefresh = ViewData["ShowRefresh"] is bool refresh && refresh;
    var refreshUrl = ViewData["RefreshUrl"]?.ToString() ?? "";
    var columns = ViewData["Columns"] as IEnumerable<dynamic> ?? new dynamic[] { };
}

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title mb-0">@title</h5>
        <div class="btn-group">
            @if (showSearch)
            {
                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleSearch('@tableId')">
                    <i class="fas fa-search"></i> Search
                </button>
            }
            @if (showRefresh && !string.IsNullOrEmpty(refreshUrl))
            {
                <button type="button" class="btn btn-sm btn-outline-primary" onclick="refreshTableData('@tableId', '@refreshUrl')">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            }
            @if (showExport)
            {
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-outline-success dropdown-toggle" data-bs-toggle="dropdown">
                        <i class="fas fa-download"></i> Export
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="exportTableToCSV('@tableId')">Export to CSV</a></li>
                        <li><a class="dropdown-item" href="#" onclick="exportTableToPDF('@tableId')">Export to PDF</a></li>
                    </ul>
                </div>
            }
        </div>
    </div>
    <div class="card-body">
        @if (showSearch)
        {
            <div class="row mb-3">
                <div class="col-md-6">
                    <input type="text" class="form-control" id="@(tableId)Search" placeholder="Search..." onkeyup="filterTable('@tableId')">
                </div>
            </div>
        }
        
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="@tableId">
                <thead class="table-dark">
                    <tr>
                        @foreach (dynamic column in columns)
                        {
                            <th scope="col">@(column?.title ?? "Unknown")</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (dynamic item in data)
                    {
                        <tr>
                            @foreach (dynamic column in columns)
                            {
                                var value = GetPropertyValue(item, column?.field);
                                if (column?.field?.ToString() == "actions")
                                {
                                    <td>@Html.Raw(value)</td>
                                }
                                else
                                {
                                    <td>@(value?.ToString() ?? "")</td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <div class="d-flex justify-content-between align-items-center mt-3">
            <div>
                <select class="form-select form-select-sm d-inline-block w-auto" id="@(tableId)PageSize" onchange="changePageSize('@tableId')">
                    <option value="10">10 per page</option>
                    <option value="25" selected>25 per page</option>
                    <option value="50">50 per page</option>
                    <option value="100">100 per page</option>
                </select>
            </div>
            <div>
                <nav>
                    <ul class="pagination pagination-sm mb-0" id="@(tableId)Pagination">
                        <!-- Pagination will be generated by JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

@functions {
    private static object GetPropertyValue(dynamic obj, string propertyName)
    {
        if (obj == null || string.IsNullOrEmpty(propertyName))
            return null;
            
        try
        {
            var property = obj.GetType().GetProperty(propertyName);
            return property?.GetValue(obj, null);
        }
        catch
        {
            return null;
        }
    }
}

<script>
// Simple table functionality
let tableData = @Html.Raw(Json.Serialize(data));
let currentPage = 1;
let pageSize = 25;
let filteredData = [...tableData];

function filterTable(tableId) {
    const searchTerm = document.getElementById(tableId + 'Search')?.value?.toLowerCase() || '';
    const table = document.getElementById(tableId);
    if (!table) return;
    
    const tbody = table.getElementsByTagName('tbody')[0];
    if (!tbody) return;
    
    filteredData = tableData.filter(item => 
        Object.values(item || {}).some(value => 
            (value?.toString() || '').toLowerCase().includes(searchTerm)
        )
    );
    
    currentPage = 1;
    displayTable(tableId);
}

function displayTable(tableId) {
    const table = document.getElementById(tableId);
    if (!table) return;
    
    const tbody = table.getElementsByTagName('tbody')[0];
    if (!tbody) return;
    
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    const pageData = filteredData.slice(startIndex, endIndex);
    
    // Clear existing rows
    tbody.innerHTML = '';
    
    // Add new rows
    pageData.forEach(item => {
        if (!item) return;
        
        const row = tbody.insertRow();
        Object.values(item).forEach(value => {
            const cell = row.insertCell();
            cell.innerHTML = value || ''; // Use innerHTML to render HTML content
        });
    });
    
    updatePagination(tableId);
}

function updatePagination(tableId) {
    const totalPages = Math.ceil(filteredData.length / pageSize);
    const pagination = document.getElementById(tableId + 'Pagination');
    if (!pagination) return;
    
    pagination.innerHTML = '';
    
    // Previous button
    const prevLi = document.createElement('li');
    prevLi.className = 'page-item' + (currentPage === 1 ? ' disabled' : '');
    prevLi.innerHTML = '<a class="page-link" href="#" onclick="changePage(\'' + tableId + '\', ' + (currentPage - 1) + ')">Previous</a>';
    pagination.appendChild(prevLi);
    
    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
        const li = document.createElement('li');
        li.className = 'page-item' + (i === currentPage ? ' active' : '');
        li.innerHTML = '<a class="page-link" href="#" onclick="changePage(\'' + tableId + '\', ' + i + ')">' + i + '</a>';
        pagination.appendChild(li);
    }
    
    // Next button
    const nextLi = document.createElement('li');
    nextLi.className = 'page-item' + (currentPage === totalPages ? ' disabled' : '');
    nextLi.innerHTML = '<a class="page-link" href="#" onclick="changePage(\'' + tableId + '\', ' + (currentPage + 1) + ')">Next</a>';
    pagination.appendChild(nextLi);
}

function changePage(tableId, page) {
    if (page >= 1 && page <= Math.ceil(filteredData.length / pageSize)) {
        currentPage = page;
        displayTable(tableId);
    }
}

function changePageSize(tableId) {
    const select = document.getElementById(tableId + 'PageSize');
    if (!select) return;
    
    pageSize = parseInt(select.value) || 25;
    currentPage = 1;
    displayTable(tableId);
}

function toggleSearch(tableId) {
    const searchBox = document.getElementById(tableId + 'Search');
    if (!searchBox) return;
    
    searchBox.style.display = searchBox.style.display === 'none' ? 'block' : 'none';
}

function refreshTableData(tableId, url) {
    if (!url) return;
    
    fetch(url)
        .then(response => response.json())
        .then(data => {
            tableData = data.data || data || [];
            filteredData = [...tableData];
            currentPage = 1;
            displayTable(tableId);
        })
        .catch(error => console.error('Error refreshing table:', error));
}

function exportTableToCSV(tableId) {
    const table = document.getElementById(tableId);
    if (!table) return;
    
    const rows = table.getElementsByTagName('tr');
    let csv = [];
    
    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        const cols = row.querySelectorAll('td, th');
        const rowData = [];
        
        for (let j = 0; j < cols.length; j++) {
            rowData.push('"' + (cols[j].textContent || '').replace(/"/g, '""') + '"');
        }
        
        csv.push(rowData.join(','));
    }
    
    const csvContent = csv.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'data.csv';
    a.click();
    window.URL.revokeObjectURL(url);
}

function exportTableToPDF(tableId) {
    // Simple PDF export using window.print()
    window.print();
}

// Initialize table on page load
document.addEventListener('DOMContentLoaded', function() {
    displayTable('@tableId');
});
</script> 